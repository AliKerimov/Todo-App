// var name string
	// var id int
	// err = conn.QueryRow(context.Background(), "select name, weight from widgets where id=$1", 42).Scan(&name, &id)
	// if err != nil {
	// 	fmt.Printf("Connected to the DB: true\n")
	// 	fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
	// 	os.Exit(1)
	// }

	// fmt.Println(name, id)




	// urlExample := "postgres://username:password@localhost:5432/database_name"
    	// 	conn, err := pgx.Connect(context.Background(), os.Getenv("DATABASE_URL"))
    	// 	if err != nil {
    	// 		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
    	// 		os.Exit(1)
    	// 	} else {
    	// 		fmt.Printf("Connected to the DB: true [" + os.Getenv("DATABASE_URL") + "] \n")
    	// 	}
    	// 	defer conn.Close(context.Background())

    	// 	//!get all todos
    	// 	// err=fetchAllTodos(conn)
    	// 	// if err!=nil{
    	// 	// 	log.Fatal(err)
    	// 	// }
    	// 	rows, err := conn.Query("SELECT id, email FROM users")
    	//   if err != nil {
    	//     // handle this error better than this
    	//     panic(err)
    	//   }
    	//   defer rows.Close()
    	//   for rows.Next() {
    	//     var id int
    	//     var firstName string
    	//     err = rows.Scan(&id, &firstName)
    	//     if err != nil {
    	//       // handle this error
    	//       panic(err)
    	//     }
    	//     fmt.Println(id, firstName)
    	//   }
    	//   // get any error encountered during iteration
    	//   err = rows.Err()
    	//   if err != nil {
    	//     panic(err)
    	//   }
    	// }

    	// func fetchAllTodos(conn *sql.DB) error{
    	// 	qry:="select id,email from users"

    	// 	rows,err:=conn.Query(qry)
    	// 	if err!=nil{
    	// 		log.Fatal(err)
    	// 		return err
    	// 	}
    	// 	for rows.Next(){
    	// 		var id int
    	// 		var email string
    	// 		err:=rows.Scan(&id,&email)
    	// 		if err!=nil{
    	// 			log.Fatal(err)
    	// 			return err
    	// 		}
    	// 		fmt.Printf(  "#%d id: %s Email: %s\n ",id,email)
    	// 	}
    	// 	defer rows.Close()

    	// 	return nil




// // str := "select email from users where id=$1"
	// er := conn.QueryRow(context.Background(),str).Scan(&email)
	// // er := conn.QueryRow(context.Background(),str, id).Scan(&email)
	// if er != nil {
	// 	log.Fatal(er)
	// 	return
	// }
	// fmt.Printf(email)









	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(struct {
		Data any `json:"data"`
	}{
		rowSlice,
	})




	type JsonResponse struct {
	Type    string  `json:"type"`
	Data    []Todos `json:"data"`
	Message string  `json:"message"`
}






-- UPDATE todo SET completed = true WHERE id=1

select * from todo






















$1, $2, $3 bunlari sql queryinde yazirsan
sonrada deyerleri ardicilliqla verirsen 3 cu atribut kimi

QueryRow

update və insert querylərinidə DB.Query ilə yazıbsan
db.Exec ilə yazmalısan